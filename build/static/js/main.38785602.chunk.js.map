{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","todo","task","input","TaskAdder","newTask","temp","push","setState","change","event","target","value","remove","splice","id","className","this","click","inputReset","Component","Tasks","props","HeaderBar","FooterBar","type","onChange","placeholder","TaskList","map","info","index","key","Task","Button","onClick","Delete","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNAGMA,G,iNACJC,MAAQ,CACNC,KAAM,CAAC,CAACC,KAAM,qBAEdC,MAAM,I,EAGRC,UAAY,WACV,GAAyB,KAArB,EAAKJ,MAAMG,MAAf,CAGE,IAAIE,EAAU,CAACH,KAAM,EAAKF,MAAMG,OAC5BG,EAAO,EAAKN,MAAMC,KACtBK,EAAKC,KAAKF,GACV,EAAKG,SAAS,CAACP,KAAKK,EAAMH,MAAO,O,EAIrCM,OAAS,SAACC,GACR,EAAKF,SAAS,CAACL,MAAOO,EAAMC,OAAOC,S,EAGrCC,OAAS,SAACH,GACR,IAAIJ,EAAO,EAAKN,MAAMC,KACtBK,EAAKQ,OAAOJ,EAAMC,OAAOI,GAAG,GAC5B,EAAKP,SAAS,CAACP,KAAKK,K,wEAIpB,OACE,yBAAKU,UAAU,OACb,kBAAC,EAAD,CAAOd,KAAQe,KAAKjB,MAAMC,KAAMiB,MAASD,KAAKb,UAAWS,OAAUI,KAAKJ,OAAQV,MAASc,KAAKR,OAAQU,WAAcF,KAAKjB,MAAMG,a,GA/BrHiB,cAqCZC,EAAQ,SAACC,GACb,OACE,yBAAKN,UAAY,QACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWE,MAASI,EAAMJ,MAAOf,MAASmB,EAAMnB,MAAOgB,WAAcG,EAAMH,aAC3E,kBAAC,EAAD,CAAUjB,KAAQoB,EAAMpB,KAAMW,OAAUS,EAAMT,WAK9CU,EAAY,WAChB,OACE,yBAAKP,UAAY,UACf,+CAKAQ,EAAY,SAACF,GACjB,OACE,yBAAKN,UAAY,UACf,wCACA,qCACA,2BAAOA,UAAY,WAAWS,KAAK,OAAOC,SAAYJ,EAAMnB,MAAOS,MAASU,EAAMH,WAAYQ,YAAc,gBAC5G,kBAAC,EAAD,CAAQT,MAASI,EAAMJ,UAKvBU,EAAW,SAACN,GAChB,OACE,yBAAKN,UAAY,WACdM,EAAMpB,KAAK2B,KAAI,SAACC,EAAKC,GACpB,OACE,yBAAKC,IAAOD,EAAOf,UAAY,YAC7B,kBAAC,EAAD,CAAMd,KAAQ4B,EAAK5B,KAAM6B,MAASA,EAAOlB,OAAUS,EAAMT,eAQ/DoB,EAAO,SAACX,GACZ,OACE,yBAAKN,UAAY,eACf,4BAAKM,EAAMpB,MACX,kBAAC,EAAD,CAAQ6B,MAAST,EAAMS,MAAOlB,OAAUS,EAAMT,WAK9CqB,EAAS,SAACZ,GACd,OAAO,4BAAQN,UAAY,SAASmB,QAAWb,EAAMJ,OAA9C,WAGHkB,EAAS,SAACd,GACd,OAAO,4BAAQP,GAAMO,EAAMS,MAAOf,UAAY,SAASmB,QAAWb,EAAMT,QAAjE,WAGMd,ICxFKsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.38785602.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todo: [{task: \"Fix this project\"}\n    ],\n    input:\"\",\n  }\n\n  TaskAdder = () => {\n    if (this.state.input === \"\") {\n      return\n    }else{\n      let newTask = {task: this.state.input}\n      let temp = this.state.todo\n      temp.push(newTask)\n      this.setState({todo:temp, input: \"\"})\n    }\n  }\n\n  change = (event) => {\n    this.setState({input: event.target.value})\n  }\n\n  remove = (event) => {\n    let temp = this.state.todo\n    temp.splice(event.target.id,1)\n    this.setState({todo:temp})\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Tasks task = {this.state.todo} click = {this.TaskAdder} remove = {this.remove} input = {this.change} inputReset = {this.state.input}/>\n      </div>\n    );\n  }\n}\n\nconst Tasks = (props) => {\n  return (\n    <div className = \"main\" >\n      <HeaderBar/>\n      <FooterBar click = {props.click} input = {props.input} inputReset = {props.inputReset} />\n      <TaskList task = {props.task} remove = {props.remove}/>\n    </div>\n  )\n}\n\nconst HeaderBar = () => {\n  return (\n    <div className = \"header\">\n      <h1>To Do List...</h1>\n    </div>\n  )\n}\n\nconst FooterBar = (props) => {\n  return (\n    <div className = \"footer\">\n      <h1>Add Task</h1>\n      <h2>To Do</h2>\n      <input className = \"inputBox\" type=\"text\" onChange = {props.input} value = {props.inputReset} placeholder = \"New Task...\"></input>\n      <Button click = {props.click}/>\n    </div>\n  )\n}\n\nconst TaskList = (props) => {\n  return (\n    <div className = \"dataBar\">\n      {props.task.map((info,index)=>{\n        return (\n          <div key = {index} className = \"taskArea\">\n            <Task task = {info.task} index = {index} remove = {props.remove}/>\n         </div>\n        )\n      })}\n    </div>\n  )\n}\n\nconst Task = (props) => {\n  return (\n    <div className = \"doAndDelete\">\n      <h2>{props.task}</h2>\n      <Delete index = {props.index} remove = {props.remove}/>\n    </div>\n  )\n}\n\nconst Button = (props) => {\n  return <button className = \"submit\" onClick = {props.click}>SUBMIT</button>\n}\n\nconst Delete = (props) => {\n  return <button id = {props.index} className = \"delete\" onClick = {props.remove}>DELETE</button>\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}